<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.regino.dao.UserMapper">
    <!--查询所有-->
    <select id="findAll" resultType="User">
        select * from user
    </select>

    <!--新增-->
    <insert id="save" parameterType="User">
        insert into user (username,birthday,sex,address)
          values(#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--修改-->
    <update id="update" parameterType="User">
        update user set username = #{username},birthday = #{birthday},sex = #{sex},
          address = #{address} where id = #{id}
    </update>

    <!--删除-->
    <delete id="delete" parameterType="int">
        delete from user where id = #{id}
    </delete>

    <!--查询一个-->
    <select id="findById" parameterType="int" resultType="User">
        select * from user where id = #{id}
    </select>

    <!--
    resultMap 手动建立映射
        id="userResultMap"
        type="User" 建立映射的Java类型
    id 标签 主键
        column="uid" 列名
        property="id" 实体属性名
   result 标签 普通字段
        column="name" 列名
        property="username" 实体属性名
-->
    <resultMap id="userResultMap" type="User">
        <id column="uid" property="id"></id>
        <result column="name" property="username"></result>
        <result column="bir" property="birthday"></result>
        <result column="gender" property="sex"></result>
        <result column="address" property="address"></result>
    </resultMap>

    <!--
        模拟表与实体的属性名不一致情况
    -->
    <select id="findAllResultMap" resultMap="userResultMap">
        SELECT id AS uid, username AS `name`,birthday AS bir ,sex AS gender ,address FROM `user`
    </select>

    <!--
        多条件查询方式一
            如果传递多个参数，parameterType属性可以省略不写
    -->
    <select id="findByIdAndUsername1"  resultType="User">
    select * from user where id = #{id} and username = #{username}
    </select>

    <!--
            多条件查询方式二
                传递一个参数，parameterType也可以省略，但为了格式，不建议省略
        -->
    <select id="findByIdAndUsername2" parameterType="User"  resultType="User">
    select * from user where id = #{id} and username = #{username}
    </select>

    <!--
    模糊查询，方式一（不推荐）
        Java代码与sql语句有耦合
    -->
    <select id="findByUsername1" parameterType="string" resultType="User">
        select * from user where username like #{username}
    </select>

    <!--
        模糊查询，方式二（不推荐）
            mysql5.5版本之前，此拼接不支持多个单引号
            oracle数据库，除了别名的位置，其余位置都不能使用双引号
    -->
    <select id="findByUsername2" parameterType="string" resultType="User">
        select * from user where username like "%" #{username} "%"
    </select>

    <!--
        模糊查询，方式三（不推荐）
            此方式，会出现sql注入
            ${} 字符串拼接，如果接收的简单数据类型，表达式名称必须是value
    -->
    <select id="findByUsername3" parameterType="string" resultType="User">
        select * from user where username like '%${value}%'
    </select>

    <!--
        模糊查询，方式四（推荐）
            使用concat()函数拼接
                select * from user where username like concat('%',#{username},'%')
            注意：oracle数据库 concat()函数只能传递二个参数，但是可以使用函数嵌套来解决
                select * from user where username like concat(concat('%',#{username}),'%')
    -->
    <select id="findByUsername4" parameterType="string" resultType="User">
        select * from user where username like concat(concat('%',#{username}),'%')
    </select>
</mapper>